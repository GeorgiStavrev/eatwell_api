# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements/base.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: update os
          command: |
            sudo apt-get update && sudo apt-get upgrade
            sudo apt-get install lsb-release

      - run:
          name: set azure cli repo
          command: |
            AZ_REPO=$(lsb_release -cs)
            A="deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main"
            echo $A | sudo tee /etc/apt/sources.list.d/azure-cli.list
      - run:
          name: add microsoft azure cert
          command: |
            curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -

      - run:
          name: install azure cli
          command: |
            sudo apt-get install apt-transport-https
            sudo apt-get update
            sudo apt-get install azure-cli

      - run:
          name: build and deploy
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r ./requirements/base.txt
            sh ./deploy.sh

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements/base.txt" }}
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      # - run:
      #     name: run tests
      #     command: |
      #       . venv/bin/activate
      #       python manage.py test

      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports
